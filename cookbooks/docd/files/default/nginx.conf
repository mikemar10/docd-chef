worker_processes auto;

user www-data;

pid /run/nginx.pid;

events {
  worker_connections 1024;
  use epoll;
}

http {
  include mime.types;
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;
  tcp_nopush on;
  tcp_nodelay off;
  gzip on;
  gzip_http_version 1.0;
  gzip_proxied any;
  gzip_min_length 500;
  gzip_disable "MSIE [1-6]\.";
  gzip_types text/plain text/html text/xml text/css
             text/comma-separated-values
             text/javascript application/x-javascript
             application/atom+xml;

  upstream app_server {
    server unix:/home/docd/docd/shared/tmp/sockets/unicorn.sock fail_timeout=0;
  }

  server {
    listen 80 default deferred;
    server_name unsupported.me www.unsupported.me;
    return 301 https://$host$request_uri;
  }

  server {
    listen 443 default deferred ssl;
    client_max_body_size 100M;
    server_name unsupported.me www.unsupported.me;
    keepalive_timeout 60;
    root /home/docd/docd/current/public;
    try_files $uri/index.html $uri.html $uri @app;

    ssl_certificate /etc/letsencrypt/live/unsupported.me/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/unsupported.me/privkey.pem;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';

    location @app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      # enable this if you forward HTTPS traffic to unicorn,
      # this helps Rack set the proper URL scheme for doing redirects:
      # proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      proxy_redirect off;

      # The Rack application may also set "X-Accel-Buffering (yes|no)"
      # in the response headers do disable/enable buffering on a
      # per-response basis.
      # proxy_buffering off;
      proxy_pass http://app_server;
    }

    # Rails error pages
    error_page 500 502 503 504 /500.html;
  }
}
